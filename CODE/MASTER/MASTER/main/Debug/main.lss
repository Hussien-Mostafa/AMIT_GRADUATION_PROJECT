
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  000008ba  0000092e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000009c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00001118  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f20  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003fb  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000775  00000000  00000000  00002533  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  00002ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027a  00000000  00000000  00002e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000750  00000000  00000000  000030ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3f       	cpi	r26, 0xF4	; 244
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 ef       	ldi	r26, 0xF4	; 244
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3f       	cpi	r26, 0xF4	; 244
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 87 02 	call	0x50e	; 0x50e <main>
  8a:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPin_Direction>:


//INPUT , OUTPUT
void DIO_SetPin_Direction(U8 PORTID, U8 PINID, U8 DIRECTION)
{
	if(DIRECTION==OUTPUT)
  92:	41 30       	cpi	r20, 0x01	; 1
  94:	09 f0       	breq	.+2      	; 0x98 <DIO_SetPin_Direction+0x6>
  96:	3e c0       	rjmp	.+124    	; 0x114 <DIO_SetPin_Direction+0x82>
	{
		switch (PORTID)
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	a9 f0       	breq	.+42     	; 0xc6 <DIO_SetPin_Direction+0x34>
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	30 f0       	brcs	.+12     	; 0xac <DIO_SetPin_Direction+0x1a>
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	f1 f0       	breq	.+60     	; 0xe0 <DIO_SetPin_Direction+0x4e>
  a4:	83 30       	cpi	r24, 0x03	; 3
  a6:	09 f0       	breq	.+2      	; 0xaa <DIO_SetPin_Direction+0x18>
  a8:	78 c0       	rjmp	.+240    	; 0x19a <DIO_SetPin_Direction+0x108>
  aa:	27 c0       	rjmp	.+78     	; 0xfa <DIO_SetPin_Direction+0x68>
		{
			case portA:     SET_BIT(DDRA_REG, PINID);     break;
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	ac 01       	movw	r20, r24
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_SetPin_Direction+0x28>
  b6:	44 0f       	add	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_SetPin_Direction+0x24>
  be:	ba 01       	movw	r22, r20
  c0:	62 2b       	or	r22, r18
  c2:	6a bb       	out	0x1a, r22	; 26
  c4:	08 95       	ret
			case portB:     SET_BIT(DDRB_REG, PINID);     break;						
  c6:	27 b3       	in	r18, 0x17	; 23
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	ac 01       	movw	r20, r24
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPin_Direction+0x42>
  d0:	44 0f       	add	r20, r20
  d2:	55 1f       	adc	r21, r21
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPin_Direction+0x3e>
  d8:	ba 01       	movw	r22, r20
  da:	62 2b       	or	r22, r18
  dc:	67 bb       	out	0x17, r22	; 23
  de:	08 95       	ret
			case portC:     SET_BIT(DDRC_REG, PINID);     break;					
  e0:	24 b3       	in	r18, 0x14	; 20
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	ac 01       	movw	r20, r24
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_SetPin_Direction+0x5c>
  ea:	44 0f       	add	r20, r20
  ec:	55 1f       	adc	r21, r21
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_SetPin_Direction+0x58>
  f2:	ba 01       	movw	r22, r20
  f4:	62 2b       	or	r22, r18
  f6:	64 bb       	out	0x14, r22	; 20
  f8:	08 95       	ret
			case portD:     SET_BIT(DDRD_REG, PINID);     break;
  fa:	21 b3       	in	r18, 0x11	; 17
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	ac 01       	movw	r20, r24
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_SetPin_Direction+0x76>
 104:	44 0f       	add	r20, r20
 106:	55 1f       	adc	r21, r21
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_SetPin_Direction+0x72>
 10c:	ba 01       	movw	r22, r20
 10e:	62 2b       	or	r22, r18
 110:	61 bb       	out	0x11, r22	; 17
 112:	08 95       	ret
		}
	}
	else if(DIRECTION== INPUT)
 114:	44 23       	and	r20, r20
 116:	09 f0       	breq	.+2      	; 0x11a <DIO_SetPin_Direction+0x88>
 118:	40 c0       	rjmp	.+128    	; 0x19a <DIO_SetPin_Direction+0x108>
	{
		switch (PORTID)
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	a9 f0       	breq	.+42     	; 0x148 <DIO_SetPin_Direction+0xb6>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	28 f0       	brcs	.+10     	; 0x12c <DIO_SetPin_Direction+0x9a>
 122:	82 30       	cpi	r24, 0x02	; 2
 124:	f9 f0       	breq	.+62     	; 0x164 <DIO_SetPin_Direction+0xd2>
 126:	83 30       	cpi	r24, 0x03	; 3
 128:	c1 f5       	brne	.+112    	; 0x19a <DIO_SetPin_Direction+0x108>
 12a:	2a c0       	rjmp	.+84     	; 0x180 <DIO_SetPin_Direction+0xee>
		{
			case portA:  CLR_BIT(DDRA_REG, PINID);  break;
 12c:	2a b3       	in	r18, 0x1a	; 26
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ac 01       	movw	r20, r24
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_SetPin_Direction+0xa8>
 136:	44 0f       	add	r20, r20
 138:	55 1f       	adc	r21, r21
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_SetPin_Direction+0xa4>
 13e:	ba 01       	movw	r22, r20
 140:	60 95       	com	r22
 142:	62 23       	and	r22, r18
 144:	6a bb       	out	0x1a, r22	; 26
 146:	08 95       	ret
			case portB:  CLR_BIT(DDRB_REG, PINID);  break;
 148:	27 b3       	in	r18, 0x17	; 23
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	ac 01       	movw	r20, r24
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_SetPin_Direction+0xc4>
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_SetPin_Direction+0xc0>
 15a:	ba 01       	movw	r22, r20
 15c:	60 95       	com	r22
 15e:	62 23       	and	r22, r18
 160:	67 bb       	out	0x17, r22	; 23
 162:	08 95       	ret
			case portC:  CLR_BIT(DDRC_REG, PINID);  break;
 164:	24 b3       	in	r18, 0x14	; 20
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	ac 01       	movw	r20, r24
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_SetPin_Direction+0xe0>
 16e:	44 0f       	add	r20, r20
 170:	55 1f       	adc	r21, r21
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_SetPin_Direction+0xdc>
 176:	ba 01       	movw	r22, r20
 178:	60 95       	com	r22
 17a:	62 23       	and	r22, r18
 17c:	64 bb       	out	0x14, r22	; 20
 17e:	08 95       	ret
			case portD:  CLR_BIT(DDRD_REG, PINID);  break;
 180:	21 b3       	in	r18, 0x11	; 17
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	ac 01       	movw	r20, r24
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_SetPin_Direction+0xfc>
 18a:	44 0f       	add	r20, r20
 18c:	55 1f       	adc	r21, r21
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_SetPin_Direction+0xf8>
 192:	ba 01       	movw	r22, r20
 194:	60 95       	com	r22
 196:	62 23       	and	r22, r18
 198:	61 bb       	out	0x11, r22	; 17
 19a:	08 95       	ret

0000019c <DIO_SetPort_Direction>:
	}
}

void DIO_SetPort_Direction(U8 PORTID, U8 DIRECTION)
{
	switch (PORTID)
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	49 f0       	breq	.+18     	; 0x1b2 <DIO_SetPort_Direction+0x16>
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	28 f0       	brcs	.+10     	; 0x1ae <DIO_SetPort_Direction+0x12>
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	39 f0       	breq	.+14     	; 0x1b6 <DIO_SetPort_Direction+0x1a>
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	41 f4       	brne	.+16     	; 0x1bc <DIO_SetPort_Direction+0x20>
 1ac:	06 c0       	rjmp	.+12     	; 0x1ba <DIO_SetPort_Direction+0x1e>
	{
		case portA: DDRA_REG = DIRECTION; break;
 1ae:	6a bb       	out	0x1a, r22	; 26
 1b0:	08 95       	ret
		case portB: DDRB_REG = DIRECTION; break;
 1b2:	67 bb       	out	0x17, r22	; 23
 1b4:	08 95       	ret
		case portC: DDRC_REG = DIRECTION; break;
 1b6:	64 bb       	out	0x14, r22	; 20
 1b8:	08 95       	ret
		case portD: DDRD_REG = DIRECTION; break;
 1ba:	61 bb       	out	0x11, r22	; 17
 1bc:	08 95       	ret

000001be <DIO_SetPin_Value>:
}

//OUTPUT= HIGH, LOW
void DIO_SetPin_Value(U8 PORTID, U8 PINID, U8 VALUE)
{
	if (VALUE== HIGH)
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <DIO_SetPin_Value+0x6>
 1c2:	3e c0       	rjmp	.+124    	; 0x240 <DIO_SetPin_Value+0x82>
	{
		switch (PORTID)
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	a9 f0       	breq	.+42     	; 0x1f2 <DIO_SetPin_Value+0x34>
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	30 f0       	brcs	.+12     	; 0x1d8 <DIO_SetPin_Value+0x1a>
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	f1 f0       	breq	.+60     	; 0x20c <DIO_SetPin_Value+0x4e>
 1d0:	83 30       	cpi	r24, 0x03	; 3
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <DIO_SetPin_Value+0x18>
 1d4:	78 c0       	rjmp	.+240    	; 0x2c6 <DIO_SetPin_Value+0x108>
 1d6:	27 c0       	rjmp	.+78     	; 0x226 <DIO_SetPin_Value+0x68>
		{
			case portA: SET_BIT(PORTA_REG, PINID); break;
 1d8:	2b b3       	in	r18, 0x1b	; 27
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	ac 01       	movw	r20, r24
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_SetPin_Value+0x28>
 1e2:	44 0f       	add	r20, r20
 1e4:	55 1f       	adc	r21, r21
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_SetPin_Value+0x24>
 1ea:	ba 01       	movw	r22, r20
 1ec:	62 2b       	or	r22, r18
 1ee:	6b bb       	out	0x1b, r22	; 27
 1f0:	08 95       	ret
			case portB: SET_BIT(PORTB_REG, PINID); break;
 1f2:	28 b3       	in	r18, 0x18	; 24
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_SetPin_Value+0x42>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_SetPin_Value+0x3e>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	68 bb       	out	0x18, r22	; 24
 20a:	08 95       	ret
			case portC: SET_BIT(PORTC_REG, PINID); break;
 20c:	25 b3       	in	r18, 0x15	; 21
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_SetPin_Value+0x5c>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_SetPin_Value+0x58>
 21e:	ba 01       	movw	r22, r20
 220:	62 2b       	or	r22, r18
 222:	65 bb       	out	0x15, r22	; 21
 224:	08 95       	ret
			case portD: SET_BIT(PORTD_REG, PINID); break;
 226:	22 b3       	in	r18, 0x12	; 18
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	ac 01       	movw	r20, r24
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_SetPin_Value+0x76>
 230:	44 0f       	add	r20, r20
 232:	55 1f       	adc	r21, r21
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_SetPin_Value+0x72>
 238:	ba 01       	movw	r22, r20
 23a:	62 2b       	or	r22, r18
 23c:	62 bb       	out	0x12, r22	; 18
 23e:	08 95       	ret
		}
	}
		else if (VALUE == LOW)
 240:	44 23       	and	r20, r20
 242:	09 f0       	breq	.+2      	; 0x246 <DIO_SetPin_Value+0x88>
 244:	40 c0       	rjmp	.+128    	; 0x2c6 <DIO_SetPin_Value+0x108>
		{
			switch (PORTID)
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	a9 f0       	breq	.+42     	; 0x274 <DIO_SetPin_Value+0xb6>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	28 f0       	brcs	.+10     	; 0x258 <DIO_SetPin_Value+0x9a>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	f9 f0       	breq	.+62     	; 0x290 <DIO_SetPin_Value+0xd2>
 252:	83 30       	cpi	r24, 0x03	; 3
 254:	c1 f5       	brne	.+112    	; 0x2c6 <DIO_SetPin_Value+0x108>
 256:	2a c0       	rjmp	.+84     	; 0x2ac <DIO_SetPin_Value+0xee>
			{
				case portA:  CLR_BIT(PORTA_REG, PINID); break;
 258:	2b b3       	in	r18, 0x1b	; 27
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	ac 01       	movw	r20, r24
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_SetPin_Value+0xa8>
 262:	44 0f       	add	r20, r20
 264:	55 1f       	adc	r21, r21
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_SetPin_Value+0xa4>
 26a:	ba 01       	movw	r22, r20
 26c:	60 95       	com	r22
 26e:	62 23       	and	r22, r18
 270:	6b bb       	out	0x1b, r22	; 27
 272:	08 95       	ret
				case portB:  CLR_BIT(PORTB_REG, PINID); break;
 274:	28 b3       	in	r18, 0x18	; 24
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	ac 01       	movw	r20, r24
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_SetPin_Value+0xc4>
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_SetPin_Value+0xc0>
 286:	ba 01       	movw	r22, r20
 288:	60 95       	com	r22
 28a:	62 23       	and	r22, r18
 28c:	68 bb       	out	0x18, r22	; 24
 28e:	08 95       	ret
				case portC:  CLR_BIT(PORTC_REG, PINID);  break;
 290:	25 b3       	in	r18, 0x15	; 21
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	ac 01       	movw	r20, r24
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_SetPin_Value+0xe0>
 29a:	44 0f       	add	r20, r20
 29c:	55 1f       	adc	r21, r21
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_SetPin_Value+0xdc>
 2a2:	ba 01       	movw	r22, r20
 2a4:	60 95       	com	r22
 2a6:	62 23       	and	r22, r18
 2a8:	65 bb       	out	0x15, r22	; 21
 2aa:	08 95       	ret
				case portD:  CLR_BIT(PORTD_REG, PINID);  break;
 2ac:	22 b3       	in	r18, 0x12	; 18
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	ac 01       	movw	r20, r24
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_SetPin_Value+0xfc>
 2b6:	44 0f       	add	r20, r20
 2b8:	55 1f       	adc	r21, r21
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_SetPin_Value+0xf8>
 2be:	ba 01       	movw	r22, r20
 2c0:	60 95       	com	r22
 2c2:	62 23       	and	r22, r18
 2c4:	62 bb       	out	0x12, r22	; 18
 2c6:	08 95       	ret

000002c8 <DIO_SetPort_Value>:
		}
	}

void DIO_SetPort_Value(U8 PORTID , U8 DIRECTION)
{
	switch (PORTID)
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	49 f0       	breq	.+18     	; 0x2de <DIO_SetPort_Value+0x16>
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	28 f0       	brcs	.+10     	; 0x2da <DIO_SetPort_Value+0x12>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	39 f0       	breq	.+14     	; 0x2e2 <DIO_SetPort_Value+0x1a>
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	41 f4       	brne	.+16     	; 0x2e8 <DIO_SetPort_Value+0x20>
 2d8:	06 c0       	rjmp	.+12     	; 0x2e6 <DIO_SetPort_Value+0x1e>
	{
		case portA: PORTA_REG = DIRECTION; break;
 2da:	6b bb       	out	0x1b, r22	; 27
 2dc:	08 95       	ret
		case portB: PORTB_REG = DIRECTION; break;
 2de:	68 bb       	out	0x18, r22	; 24
 2e0:	08 95       	ret
		case portC: PORTC_REG = DIRECTION; break;
 2e2:	65 bb       	out	0x15, r22	; 21
 2e4:	08 95       	ret
		case portD: PORTD_REG = DIRECTION; break;
 2e6:	62 bb       	out	0x12, r22	; 18
 2e8:	08 95       	ret

000002ea <DIO_U8GetPin_Value>:

//INPUT= HIGH, LOW
U8 DIO_U8GetPin_Value(U8 PORTID, U8 PINID)
{
	U8 local_u8data= 0xFF;
	switch (PORTID)
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	89 f0       	breq	.+34     	; 0x310 <DIO_U8GetPin_Value+0x26>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	28 f0       	brcs	.+10     	; 0x2fc <DIO_U8GetPin_Value+0x12>
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	b9 f0       	breq	.+46     	; 0x324 <DIO_U8GetPin_Value+0x3a>
 2f6:	83 30       	cpi	r24, 0x03	; 3
 2f8:	49 f5       	brne	.+82     	; 0x34c <DIO_U8GetPin_Value+0x62>
 2fa:	1e c0       	rjmp	.+60     	; 0x338 <DIO_U8GetPin_Value+0x4e>
	{
		case portA: local_u8data= GET_BIT(PINA_REG, PINID); break;		
 2fc:	29 b3       	in	r18, 0x19	; 25
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	c9 01       	movw	r24, r18
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_U8GetPin_Value+0x1e>
 304:	95 95       	asr	r25
 306:	87 95       	ror	r24
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_U8GetPin_Value+0x1a>
 30c:	81 70       	andi	r24, 0x01	; 1
 30e:	08 95       	ret
		case portB: local_u8data= GET_BIT(PINB_REG, PINID); break;		
 310:	26 b3       	in	r18, 0x16	; 22
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	c9 01       	movw	r24, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_U8GetPin_Value+0x32>
 318:	95 95       	asr	r25
 31a:	87 95       	ror	r24
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_U8GetPin_Value+0x2e>
 320:	81 70       	andi	r24, 0x01	; 1
 322:	08 95       	ret
		case portC: local_u8data= GET_BIT(PINC_REG, PINID); break;	
 324:	23 b3       	in	r18, 0x13	; 19
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	c9 01       	movw	r24, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_U8GetPin_Value+0x46>
 32c:	95 95       	asr	r25
 32e:	87 95       	ror	r24
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_U8GetPin_Value+0x42>
 334:	81 70       	andi	r24, 0x01	; 1
 336:	08 95       	ret
		case portD: local_u8data= GET_BIT(PIND_REG, PINID); break;
 338:	20 b3       	in	r18, 0x10	; 16
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	c9 01       	movw	r24, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_U8GetPin_Value+0x5a>
 340:	95 95       	asr	r25
 342:	87 95       	ror	r24
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_U8GetPin_Value+0x56>
 348:	81 70       	andi	r24, 0x01	; 1
 34a:	08 95       	ret
}

//INPUT= HIGH, LOW
U8 DIO_U8GetPin_Value(U8 PORTID, U8 PINID)
{
	U8 local_u8data= 0xFF;
 34c:	8f ef       	ldi	r24, 0xFF	; 255
		case portB: local_u8data= GET_BIT(PINB_REG, PINID); break;		
		case portC: local_u8data= GET_BIT(PINC_REG, PINID); break;	
		case portD: local_u8data= GET_BIT(PIND_REG, PINID); break;
	}
	return local_u8data;
}
 34e:	08 95       	ret

00000350 <LCD_Write_Command>:
	LCD_Write_Command(0x06);//shift curser
	LCD_Write_Command(0x01);//clear Display
}

void LCD_Write_Command(U8 Command)
{
 350:	cf 93       	push	r28
 352:	c8 2f       	mov	r28, r24
	//RS low
	DIO_SetPin_Value(portB, PIN1, LOW);
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPin_Value>
	//RW low
	DIO_SetPin_Value(portB, PIN2, LOW);
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	62 e0       	ldi	r22, 0x02	; 2
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPin_Value>
	//Sending highest nibble
	PORTA_REG=(PORTA_REG&0x0F)|(Command&0xF0);
 368:	8b b3       	in	r24, 0x1b	; 27
 36a:	9c 2f       	mov	r25, r28
 36c:	90 7f       	andi	r25, 0xF0	; 240
 36e:	8f 70       	andi	r24, 0x0F	; 15
 370:	89 2b       	or	r24, r25
 372:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(portB, PIN3, HIGH);
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	63 e0       	ldi	r22, 0x03	; 3
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37e:	89 ef       	ldi	r24, 0xF9	; 249
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_Write_Command+0x32>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_Write_Command+0x38>
 388:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(portB, PIN3, LOW);
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	63 e0       	ldi	r22, 0x03	; 3
 38e:	40 e0       	ldi	r20, 0x00	; 0
 390:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPin_Value>
 394:	81 ee       	ldi	r24, 0xE1	; 225
 396:	94 e0       	ldi	r25, 0x04	; 4
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <LCD_Write_Command+0x48>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <LCD_Write_Command+0x4e>
 39e:	00 00       	nop
	_delay_ms(5);


	PORTA_REG=(PORTA_REG&0x0F)|(Command<<4);
 3a0:	8b b3       	in	r24, 0x1b	; 27
 3a2:	c2 95       	swap	r28
 3a4:	c0 7f       	andi	r28, 0xF0	; 240
 3a6:	8f 70       	andi	r24, 0x0F	; 15
 3a8:	c8 2b       	or	r28, r24
 3aa:	cb bb       	out	0x1b, r28	; 27
	DIO_SetPin_Value(portB, PIN3, HIGH);
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	63 e0       	ldi	r22, 0x03	; 3
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPin_Value>
 3b6:	89 ef       	ldi	r24, 0xF9	; 249
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_Write_Command+0x6a>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCD_Write_Command+0x70>
 3c0:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(portB, PIN3, LOW);
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	63 e0       	ldi	r22, 0x03	; 3
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPin_Value>
 3cc:	81 ee       	ldi	r24, 0xE1	; 225
 3ce:	94 e0       	ldi	r25, 0x04	; 4
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <LCD_Write_Command+0x80>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <LCD_Write_Command+0x86>
 3d6:	00 00       	nop
	_delay_ms(5);
}
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <LCD_Init>:


void LCD_Init(void)
{
	//RS B1
	DIO_SetPin_Direction(portB, PIN1, OUTPUT);
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	//RW B2
	DIO_SetPin_Direction(portB, PIN2, OUTPUT);
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	62 e0       	ldi	r22, 0x02	; 2
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	//E B3
	DIO_SetPin_Direction(portB, PIN3, OUTPUT);
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	63 e0       	ldi	r22, 0x03	; 3
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	//data lines
	DIO_SetPin_Direction(portA, PIN4, OUTPUT);
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	64 e0       	ldi	r22, 0x04	; 4
 3fe:	41 e0       	ldi	r20, 0x01	; 1
 400:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(portA, PIN5, OUTPUT);
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	65 e0       	ldi	r22, 0x05	; 5
 408:	41 e0       	ldi	r20, 0x01	; 1
 40a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(portA, PIN6, OUTPUT);
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	66 e0       	ldi	r22, 0x06	; 6
 412:	41 e0       	ldi	r20, 0x01	; 1
 414:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(portA, PIN7, OUTPUT);
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	67 e0       	ldi	r22, 0x07	; 7
 41c:	41 e0       	ldi	r20, 0x01	; 1
 41e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 422:	87 ea       	ldi	r24, 0xA7	; 167
 424:	91 e6       	ldi	r25, 0x61	; 97
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <LCD_Init+0x4a>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <LCD_Init+0x50>
 42c:	00 00       	nop

	_delay_ms(100);

	
	LCD_Write_Command(0x02);//send for 4 bit initialization of LCD
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
	LCD_Write_Command(0x28);//2 line, 5*7 matrix in 4-bit mode
 434:	88 e2       	ldi	r24, 0x28	; 40
 436:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
	LCD_Write_Command(0x0C);//display on, curser of
 43a:	8c e0       	ldi	r24, 0x0C	; 12
 43c:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
	LCD_Write_Command(0x06);//shift curser
 440:	86 e0       	ldi	r24, 0x06	; 6
 442:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
	LCD_Write_Command(0x01);//clear Display
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
}
 44c:	08 95       	ret

0000044e <LCD_Write_Data>:
	DIO_SetPin_Value(portB, PIN3, LOW);
	_delay_ms(5);
}

void LCD_Write_Data(U8 Data)
{
 44e:	cf 93       	push	r28
 450:	c8 2f       	mov	r28, r24
	//RS low
	DIO_SetPin_Value(portB, PIN1, HIGH);
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	41 e0       	ldi	r20, 0x01	; 1
 458:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPin_Value>
	//RW high
	DIO_SetPin_Value(portB, PIN2, LOW);
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	62 e0       	ldi	r22, 0x02	; 2
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPin_Value>
	//Sending Highest nibble
	PORTA_REG=(PORTA_REG&0x0F)|(Data&0xF0);
 466:	8b b3       	in	r24, 0x1b	; 27
 468:	9c 2f       	mov	r25, r28
 46a:	90 7f       	andi	r25, 0xF0	; 240
 46c:	8f 70       	andi	r24, 0x0F	; 15
 46e:	89 2b       	or	r24, r25
 470:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPin_Value(portB, PIN3, HIGH);
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	63 e0       	ldi	r22, 0x03	; 3
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPin_Value>
 47c:	89 ef       	ldi	r24, 0xF9	; 249
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <LCD_Write_Data+0x32>
 484:	00 c0       	rjmp	.+0      	; 0x486 <LCD_Write_Data+0x38>
 486:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(portB, PIN3, LOW);
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	63 e0       	ldi	r22, 0x03	; 3
 48c:	40 e0       	ldi	r20, 0x00	; 0
 48e:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPin_Value>
 492:	81 ee       	ldi	r24, 0xE1	; 225
 494:	94 e0       	ldi	r25, 0x04	; 4
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <LCD_Write_Data+0x48>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <LCD_Write_Data+0x4e>
 49c:	00 00       	nop
	_delay_ms(5);


	PORTA_REG=(PORTA_REG&0x0F)|(Data<<4);
 49e:	8b b3       	in	r24, 0x1b	; 27
 4a0:	c2 95       	swap	r28
 4a2:	c0 7f       	andi	r28, 0xF0	; 240
 4a4:	8f 70       	andi	r24, 0x0F	; 15
 4a6:	c8 2b       	or	r28, r24
 4a8:	cb bb       	out	0x1b, r28	; 27
	DIO_SetPin_Value(portB, PIN3, HIGH);
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	63 e0       	ldi	r22, 0x03	; 3
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPin_Value>
 4b4:	89 ef       	ldi	r24, 0xF9	; 249
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <LCD_Write_Data+0x6a>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <LCD_Write_Data+0x70>
 4be:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin_Value(portB, PIN3, LOW);
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	63 e0       	ldi	r22, 0x03	; 3
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPin_Value>
 4ca:	81 ee       	ldi	r24, 0xE1	; 225
 4cc:	94 e0       	ldi	r25, 0x04	; 4
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <LCD_Write_Data+0x80>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <LCD_Write_Data+0x86>
 4d4:	00 00       	nop
	_delay_ms(5);
}
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <LCD_Write_Word>:

void LCD_Write_Word(U8 *Word)
{
 4da:	0f 93       	push	r16
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	8c 01       	movw	r16, r24
	U8 index=0;
	while(Word[index]!='\0')
 4e2:	fc 01       	movw	r30, r24
 4e4:	80 81       	ld	r24, Z
 4e6:	88 23       	and	r24, r24
 4e8:	51 f0       	breq	.+20     	; 0x4fe <LCD_Write_Word+0x24>
	_delay_ms(5);
}

void LCD_Write_Word(U8 *Word)
{
	U8 index=0;
 4ea:	c0 e0       	ldi	r28, 0x00	; 0
	while(Word[index]!='\0')
	{
		LCD_Write_Data(Word[index]);
 4ec:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_Write_Data>
		index++;
 4f0:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_Write_Word(U8 *Word)
{
	U8 index=0;
	while(Word[index]!='\0')
 4f2:	f8 01       	movw	r30, r16
 4f4:	ec 0f       	add	r30, r28
 4f6:	f1 1d       	adc	r31, r1
 4f8:	80 81       	ld	r24, Z
 4fa:	88 23       	and	r24, r24
 4fc:	b9 f7       	brne	.-18     	; 0x4ec <LCD_Write_Word+0x12>
	{
		LCD_Write_Data(Word[index]);
		index++;
	}
}
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	08 95       	ret

00000506 <LCD_Clear_Screen>:

void LCD_Clear_Screen(void)
{
	LCD_Write_Command(0x01);
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
}
 50c:	08 95       	ret

0000050e <main>:


int main(void)
{
	
		LCD_Init();
 50e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_Init>
		SPI_Master_Init();
 512:	0e 94 0c 04 	call	0x818	; 0x818 <SPI_Master_Init>
		UART_Init();
 516:	0e 94 4a 04 	call	0x894	; 0x894 <UART_Init>
 51a:	83 ec       	ldi	r24, 0xC3	; 195
 51c:	99 e0       	ldi	r25, 0x09	; 9
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <main+0x10>
 522:	00 c0       	rjmp	.+0      	; 0x524 <main+0x16>
 524:	00 00       	nop
		
		_delay_ms(10);
		LCD_Write_Command(0x80);//the LCD command will be Force cursor to the beginning ( 1st line)
 526:	80 e8       	ldi	r24, 0x80	; 128
 528:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
		LCD_Write_Word("   WELCOME.   ");
 52c:	80 e6       	ldi	r24, 0x60	; 96
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
 534:	8f ef       	ldi	r24, 0xFF	; 255
 536:	98 e0       	ldi	r25, 0x08	; 8
 538:	ad e3       	ldi	r26, 0x3D	; 61
 53a:	81 50       	subi	r24, 0x01	; 1
 53c:	90 40       	sbci	r25, 0x00	; 0
 53e:	a0 40       	sbci	r26, 0x00	; 0
 540:	e1 f7       	brne	.-8      	; 0x53a <main+0x2c>
 542:	00 c0       	rjmp	.+0      	; 0x544 <main+0x36>
 544:	00 00       	nop
		_delay_ms(20000);
		LCD_Clear_Screen();//the LCD command will be the clear LCD screen
 546:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Clear_Screen>
 54a:	a3 ec       	ldi	r26, 0xC3	; 195
 54c:	b9 e0       	ldi	r27, 0x09	; 9
 54e:	11 97       	sbiw	r26, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <main+0x40>
 552:	00 c0       	rjmp	.+0      	; 0x554 <main+0x46>
 554:	00 00       	nop
		_delay_ms(10);
		
		LCD_Write_Command(0x80);//the LCD command will be Force cursor to the beginning ( 1st line)
 556:	80 e8       	ldi	r24, 0x80	; 128
 558:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
		LCD_Write_Word("CHOOSE FROM THE");
 55c:	8f e6       	ldi	r24, 0x6F	; 111
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
		LCD_Write_Command(0xc0);//the LCD command will be Force cursor to the beginning ( 2st line)
 564:	80 ec       	ldi	r24, 0xC0	; 192
 566:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
		LCD_Write_Word("FOLLOWING MENUE");
 56a:	8f e7       	ldi	r24, 0x7F	; 127
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
 572:	8f ef       	ldi	r24, 0xFF	; 255
 574:	91 e1       	ldi	r25, 0x11	; 17
 576:	aa e7       	ldi	r26, 0x7A	; 122
 578:	81 50       	subi	r24, 0x01	; 1
 57a:	90 40       	sbci	r25, 0x00	; 0
 57c:	a0 40       	sbci	r26, 0x00	; 0
 57e:	e1 f7       	brne	.-8      	; 0x578 <main+0x6a>
 580:	00 c0       	rjmp	.+0      	; 0x582 <main+0x74>
 582:	00 00       	nop
		_delay_ms(40000);
		LCD_Clear_Screen();//the LCD command will be the clear LCD screen
 584:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Clear_Screen>
 588:	a3 ec       	ldi	r26, 0xC3	; 195
 58a:	b9 e0       	ldi	r27, 0x09	; 9
 58c:	11 97       	sbiw	r26, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <main+0x7e>
 590:	00 c0       	rjmp	.+0      	; 0x592 <main+0x84>
 592:	00 00       	nop
			
    while(1)
    {
		
		LCD_Write_Command(0x80);//the LCD command will be Force cursor to the beginning ( 1st line)
		LCD_Write_Word("1)ROOM LIGHTS. ");
 594:	cf e8       	ldi	r28, 0x8F	; 143
 596:	d0 e0       	ldi	r29, 0x00	; 0
		LCD_Write_Command(0xc0);//the LCD command will be Force cursor to the beginning ( 2st line)
		LCD_Write_Word("2)HOME DEVICES. ");
 598:	0f e9       	ldi	r16, 0x9F	; 159
 59a:	10 e0       	ldi	r17, 0x00	; 0
			case '2': // if the user choose devices
			LCD_Clear_Screen();//the LCD command will be the clear LCD screen
			_delay_ms(10);
			
			LCD_Write_Command(0x80);//the LCD command will be Force cursor to the beginning ( 1st line)
			LCD_Write_Word("1)TV   ");
 59c:	0f 2e       	mov	r0, r31
 59e:	fa ed       	ldi	r31, 0xDA	; 218
 5a0:	af 2e       	mov	r10, r31
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	bf 2e       	mov	r11, r31
 5a6:	f0 2d       	mov	r31, r0
			LCD_Write_Command(0xc0);//the LCD command will be Force cursor to the beginning ( 2st line)
			LCD_Write_Word("2)AIR CONDITIONER");
 5a8:	0f 2e       	mov	r0, r31
 5aa:	f2 ee       	ldi	r31, 0xE2	; 226
 5ac:	8f 2e       	mov	r8, r31
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	9f 2e       	mov	r9, r31
 5b2:	f0 2d       	mov	r31, r0
					
					LCD_Clear_Screen();//the LCD command will be the clear LCD screen
					_delay_ms(10);
					
					LCD_Write_Command(0x80);//the LCD command will be Force cursor to the beginning ( 1st line)
					LCD_Write_Word("1) ON   ");
 5b4:	0f 2e       	mov	r0, r31
 5b6:	f8 ec       	ldi	r31, 0xC8	; 200
 5b8:	ef 2e       	mov	r14, r31
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	ff 2e       	mov	r15, r31
 5be:	f0 2d       	mov	r31, r0
					LCD_Write_Command(0xc0);//the LCD command will be Force cursor to the beginning ( 2st line)
					LCD_Write_Word("2) OFF  ");
 5c0:	0f 2e       	mov	r0, r31
 5c2:	f1 ed       	ldi	r31, 0xD1	; 209
 5c4:	cf 2e       	mov	r12, r31
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	df 2e       	mov	r13, r31
 5ca:	f0 2d       	mov	r31, r0
			case '1': // if the user choose lights
			LCD_Clear_Screen();//the LCD command will be the clear LCD screen
			_delay_ms(10);
			
			LCD_Write_Command(0x80);//the LCD command will be Force cursor to the beginning ( 1st line)
	        LCD_Write_Word("1)ROOM 1   ");
 5cc:	0f 2e       	mov	r0, r31
 5ce:	f0 eb       	ldi	r31, 0xB0	; 176
 5d0:	6f 2e       	mov	r6, r31
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	7f 2e       	mov	r7, r31
 5d6:	f0 2d       	mov	r31, r0
	        LCD_Write_Command(0xc0);//the LCD command will be Force cursor to the beginning ( 2st line)
         	LCD_Write_Word("2)ROOM 2   ");
 5d8:	0f 2e       	mov	r0, r31
 5da:	fc eb       	ldi	r31, 0xBC	; 188
 5dc:	4f 2e       	mov	r4, r31
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	5f 2e       	mov	r5, r31
 5e2:	f0 2d       	mov	r31, r0
		
			
    while(1)
    {
		
		LCD_Write_Command(0x80);//the LCD command will be Force cursor to the beginning ( 1st line)
 5e4:	80 e8       	ldi	r24, 0x80	; 128
 5e6:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
		LCD_Write_Word("1)ROOM LIGHTS. ");
 5ea:	ce 01       	movw	r24, r28
 5ec:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
		LCD_Write_Command(0xc0);//the LCD command will be Force cursor to the beginning ( 2st line)
 5f0:	80 ec       	ldi	r24, 0xC0	; 192
 5f2:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
		LCD_Write_Word("2)HOME DEVICES. ");
 5f6:	c8 01       	movw	r24, r16
 5f8:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
		
        switch (UART_Recieve())
 5fc:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_Recieve>
 600:	81 33       	cpi	r24, 0x31	; 49
 602:	19 f0       	breq	.+6      	; 0x60a <main+0xfc>
 604:	82 33       	cpi	r24, 0x32	; 50
 606:	71 f7       	brne	.-36     	; 0x5e4 <main+0xd6>
 608:	83 c0       	rjmp	.+262    	; 0x710 <main+0x202>
        {
			
			case '1': // if the user choose lights
			LCD_Clear_Screen();//the LCD command will be the clear LCD screen
 60a:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Clear_Screen>
 60e:	83 ec       	ldi	r24, 0xC3	; 195
 610:	99 e0       	ldi	r25, 0x09	; 9
 612:	01 97       	sbiw	r24, 0x01	; 1
 614:	f1 f7       	brne	.-4      	; 0x612 <main+0x104>
 616:	00 c0       	rjmp	.+0      	; 0x618 <main+0x10a>
 618:	00 00       	nop
			_delay_ms(10);
			
			LCD_Write_Command(0x80);//the LCD command will be Force cursor to the beginning ( 1st line)
 61a:	80 e8       	ldi	r24, 0x80	; 128
 61c:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
	        LCD_Write_Word("1)ROOM 1   ");
 620:	c3 01       	movw	r24, r6
 622:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
	        LCD_Write_Command(0xc0);//the LCD command will be Force cursor to the beginning ( 2st line)
 626:	80 ec       	ldi	r24, 0xC0	; 192
 628:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
         	LCD_Write_Word("2)ROOM 2   ");
 62c:	c2 01       	movw	r24, r4
 62e:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
			
			switch (UART_Recieve())
 632:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_Recieve>
 636:	81 33       	cpi	r24, 0x31	; 49
 638:	19 f0       	breq	.+6      	; 0x640 <main+0x132>
 63a:	82 33       	cpi	r24, 0x32	; 50
 63c:	99 f6       	brne	.-90     	; 0x5e4 <main+0xd6>
 63e:	34 c0       	rjmp	.+104    	; 0x6a8 <main+0x19a>
			{
				
				case '1':// if the user choose room1
				{
					
				LCD_Clear_Screen();//the LCD command will be the clear LCD screen
 640:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Clear_Screen>
 644:	a3 ec       	ldi	r26, 0xC3	; 195
 646:	b9 e0       	ldi	r27, 0x09	; 9
 648:	11 97       	sbiw	r26, 0x01	; 1
 64a:	f1 f7       	brne	.-4      	; 0x648 <main+0x13a>
 64c:	00 c0       	rjmp	.+0      	; 0x64e <main+0x140>
 64e:	00 00       	nop
				_delay_ms(10);
				
				LCD_Write_Command(0x80);//the LCD command will be Force cursor to the beginning ( 1st line)
 650:	80 e8       	ldi	r24, 0x80	; 128
 652:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
				LCD_Write_Word("1) ON   ");
 656:	c7 01       	movw	r24, r14
 658:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
				LCD_Write_Command(0xc0);//the LCD command will be Force cursor to the beginning ( 2st line)
 65c:	80 ec       	ldi	r24, 0xC0	; 192
 65e:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
				LCD_Write_Word("2) OFF  ");
 662:	c6 01       	movw	r24, r12
 664:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
				
			   	switch (UART_Recieve())
 668:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_Recieve>
 66c:	81 33       	cpi	r24, 0x31	; 49
 66e:	21 f0       	breq	.+8      	; 0x678 <main+0x16a>
 670:	82 33       	cpi	r24, 0x32	; 50
 672:	09 f0       	breq	.+2      	; 0x676 <main+0x168>
 674:	b7 cf       	rjmp	.-146    	; 0x5e4 <main+0xd6>
 676:	0c c0       	rjmp	.+24     	; 0x690 <main+0x182>
				{                   	
			         case '1':// if the user choose light on room1
				     {
				      LCD_Clear_Screen();//the LCD command will be the clear LCD screen
 678:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Clear_Screen>
 67c:	83 ec       	ldi	r24, 0xC3	; 195
 67e:	99 e0       	ldi	r25, 0x09	; 9
 680:	01 97       	sbiw	r24, 0x01	; 1
 682:	f1 f7       	brne	.-4      	; 0x680 <main+0x172>
 684:	00 c0       	rjmp	.+0      	; 0x686 <main+0x178>
 686:	00 00       	nop
				      _delay_ms(10);
				      SPI_Send_Data(ROOM1_LIGHT_ON);
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	0e 94 3a 04 	call	0x874	; 0x874 <SPI_Send_Data>
				      
				     }break;
 68e:	aa cf       	rjmp	.-172    	; 0x5e4 <main+0xd6>

				     case '2':// if the user choose light off room1
				     {
			          LCD_Clear_Screen();//the LCD command will be the clear LCD screen
 690:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Clear_Screen>
 694:	a3 ec       	ldi	r26, 0xC3	; 195
 696:	b9 e0       	ldi	r27, 0x09	; 9
 698:	11 97       	sbiw	r26, 0x01	; 1
 69a:	f1 f7       	brne	.-4      	; 0x698 <main+0x18a>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <main+0x190>
 69e:	00 00       	nop
				      _delay_ms(10);
				      SPI_Send_Data(ROOM1_LIGHT_OFF);
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	0e 94 3a 04 	call	0x874	; 0x874 <SPI_Send_Data>
                	  
				     }break;
 6a6:	9e cf       	rjmp	.-196    	; 0x5e4 <main+0xd6>
				
				
			    case '2':// if the user choose room2
			    {
					
			    LCD_Clear_Screen();//the LCD command will be the clear LCD screen
 6a8:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Clear_Screen>
 6ac:	83 ec       	ldi	r24, 0xC3	; 195
 6ae:	99 e0       	ldi	r25, 0x09	; 9
 6b0:	01 97       	sbiw	r24, 0x01	; 1
 6b2:	f1 f7       	brne	.-4      	; 0x6b0 <main+0x1a2>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <main+0x1a8>
 6b6:	00 00       	nop
			   	_delay_ms(10);
				
			   	LCD_Write_Command(0x80);//the LCD command will be Force cursor to the beginning ( 1st line)
 6b8:	80 e8       	ldi	r24, 0x80	; 128
 6ba:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
			   	LCD_Write_Word("1) ON   ");
 6be:	c7 01       	movw	r24, r14
 6c0:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
			   	LCD_Write_Command(0xc0);//the LCD command will be Force cursor to the beginning ( 2st line)
 6c4:	80 ec       	ldi	r24, 0xC0	; 192
 6c6:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
			  	LCD_Write_Word("2) OFF  ");
 6ca:	c6 01       	movw	r24, r12
 6cc:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
				
			   	switch (UART_Recieve())
 6d0:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_Recieve>
 6d4:	81 33       	cpi	r24, 0x31	; 49
 6d6:	21 f0       	breq	.+8      	; 0x6e0 <main+0x1d2>
 6d8:	82 33       	cpi	r24, 0x32	; 50
 6da:	09 f0       	breq	.+2      	; 0x6de <main+0x1d0>
 6dc:	83 cf       	rjmp	.-250    	; 0x5e4 <main+0xd6>
 6de:	0c c0       	rjmp	.+24     	; 0x6f8 <main+0x1ea>
			   	{
				   	case '1':// if the user choose light on room2
				   	{
					   	LCD_Clear_Screen();//the LCD command will be the clear LCD screen
 6e0:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Clear_Screen>
 6e4:	a3 ec       	ldi	r26, 0xC3	; 195
 6e6:	b9 e0       	ldi	r27, 0x09	; 9
 6e8:	11 97       	sbiw	r26, 0x01	; 1
 6ea:	f1 f7       	brne	.-4      	; 0x6e8 <main+0x1da>
 6ec:	00 c0       	rjmp	.+0      	; 0x6ee <main+0x1e0>
 6ee:	00 00       	nop
					   	_delay_ms(10);
					   	SPI_Send_Data(ROOM2_LIGHT_ON);
 6f0:	83 e0       	ldi	r24, 0x03	; 3
 6f2:	0e 94 3a 04 	call	0x874	; 0x874 <SPI_Send_Data>
					   	
				   	}break;
 6f6:	76 cf       	rjmp	.-276    	; 0x5e4 <main+0xd6>

				   	case '2':// if the user choose light off room2
				   	{
					   	LCD_Clear_Screen();//the LCD command will be the clear LCD screen
 6f8:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Clear_Screen>
 6fc:	83 ec       	ldi	r24, 0xC3	; 195
 6fe:	99 e0       	ldi	r25, 0x09	; 9
 700:	01 97       	sbiw	r24, 0x01	; 1
 702:	f1 f7       	brne	.-4      	; 0x700 <main+0x1f2>
 704:	00 c0       	rjmp	.+0      	; 0x706 <main+0x1f8>
 706:	00 00       	nop
					   	_delay_ms(10);
					   	SPI_Send_Data(ROOM2_LIGHT_OFF);
 708:	84 e0       	ldi	r24, 0x04	; 4
 70a:	0e 94 3a 04 	call	0x874	; 0x874 <SPI_Send_Data>
					   	
				   	}break;
 70e:	6a cf       	rjmp	.-300    	; 0x5e4 <main+0xd6>
				
				
				
				
			case '2': // if the user choose devices
			LCD_Clear_Screen();//the LCD command will be the clear LCD screen
 710:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Clear_Screen>
 714:	a3 ec       	ldi	r26, 0xC3	; 195
 716:	b9 e0       	ldi	r27, 0x09	; 9
 718:	11 97       	sbiw	r26, 0x01	; 1
 71a:	f1 f7       	brne	.-4      	; 0x718 <main+0x20a>
 71c:	00 c0       	rjmp	.+0      	; 0x71e <main+0x210>
 71e:	00 00       	nop
			_delay_ms(10);
			
			LCD_Write_Command(0x80);//the LCD command will be Force cursor to the beginning ( 1st line)
 720:	80 e8       	ldi	r24, 0x80	; 128
 722:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
			LCD_Write_Word("1)TV   ");
 726:	c5 01       	movw	r24, r10
 728:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
			LCD_Write_Command(0xc0);//the LCD command will be Force cursor to the beginning ( 2st line)
 72c:	80 ec       	ldi	r24, 0xC0	; 192
 72e:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
			LCD_Write_Word("2)AIR CONDITIONER");
 732:	c4 01       	movw	r24, r8
 734:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
			
			switch (UART_Recieve())
 738:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_Recieve>
 73c:	81 33       	cpi	r24, 0x31	; 49
 73e:	21 f0       	breq	.+8      	; 0x748 <main+0x23a>
 740:	82 33       	cpi	r24, 0x32	; 50
 742:	09 f0       	breq	.+2      	; 0x746 <main+0x238>
 744:	4f cf       	rjmp	.-354    	; 0x5e4 <main+0xd6>
 746:	34 c0       	rjmp	.+104    	; 0x7b0 <main+0x2a2>
			{
				
				case '1':// if the user choose TV
				{
					
					LCD_Clear_Screen();//the LCD command will be the clear LCD screen
 748:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Clear_Screen>
 74c:	83 ec       	ldi	r24, 0xC3	; 195
 74e:	99 e0       	ldi	r25, 0x09	; 9
 750:	01 97       	sbiw	r24, 0x01	; 1
 752:	f1 f7       	brne	.-4      	; 0x750 <main+0x242>
 754:	00 c0       	rjmp	.+0      	; 0x756 <main+0x248>
 756:	00 00       	nop
					_delay_ms(10);
					
					LCD_Write_Command(0x80);//the LCD command will be Force cursor to the beginning ( 1st line)
 758:	80 e8       	ldi	r24, 0x80	; 128
 75a:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
					LCD_Write_Word("1) ON   ");
 75e:	c7 01       	movw	r24, r14
 760:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
					LCD_Write_Command(0xc0);//the LCD command will be Force cursor to the beginning ( 2st line)
 764:	80 ec       	ldi	r24, 0xC0	; 192
 766:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
					LCD_Write_Word("2) OFF  ");
 76a:	c6 01       	movw	r24, r12
 76c:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
					
					switch (UART_Recieve())
 770:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_Recieve>
 774:	81 30       	cpi	r24, 0x01	; 1
 776:	21 f0       	breq	.+8      	; 0x780 <main+0x272>
 778:	82 30       	cpi	r24, 0x02	; 2
 77a:	09 f0       	breq	.+2      	; 0x77e <main+0x270>
 77c:	33 cf       	rjmp	.-410    	; 0x5e4 <main+0xd6>
 77e:	0c c0       	rjmp	.+24     	; 0x798 <main+0x28a>
					{
						case 1:// if the user choose  on TV
						{
							LCD_Clear_Screen();//the LCD command will be the clear LCD screen
 780:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Clear_Screen>
 784:	a3 ec       	ldi	r26, 0xC3	; 195
 786:	b9 e0       	ldi	r27, 0x09	; 9
 788:	11 97       	sbiw	r26, 0x01	; 1
 78a:	f1 f7       	brne	.-4      	; 0x788 <main+0x27a>
 78c:	00 c0       	rjmp	.+0      	; 0x78e <main+0x280>
 78e:	00 00       	nop
							_delay_ms(10);
							SPI_Send_Data(TV_ONN);
 790:	85 e0       	ldi	r24, 0x05	; 5
 792:	0e 94 3a 04 	call	0x874	; 0x874 <SPI_Send_Data>
							
						}break;
 796:	26 cf       	rjmp	.-436    	; 0x5e4 <main+0xd6>

						case 2:// if the user choose off TV
						{
							LCD_Clear_Screen();//the LCD command will be the clear LCD screen
 798:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Clear_Screen>
 79c:	83 ec       	ldi	r24, 0xC3	; 195
 79e:	99 e0       	ldi	r25, 0x09	; 9
 7a0:	01 97       	sbiw	r24, 0x01	; 1
 7a2:	f1 f7       	brne	.-4      	; 0x7a0 <main+0x292>
 7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <main+0x298>
 7a6:	00 00       	nop
							_delay_ms(10);
							SPI_Send_Data(TV_OF);
 7a8:	86 e0       	ldi	r24, 0x06	; 6
 7aa:	0e 94 3a 04 	call	0x874	; 0x874 <SPI_Send_Data>
							
						}break;
 7ae:	1a cf       	rjmp	.-460    	; 0x5e4 <main+0xd6>
				
				
				case '2':// if the user choose air conditioner
				{
					
					LCD_Clear_Screen();//the LCD command will be the clear LCD screen
 7b0:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Clear_Screen>
 7b4:	a3 ec       	ldi	r26, 0xC3	; 195
 7b6:	b9 e0       	ldi	r27, 0x09	; 9
 7b8:	11 97       	sbiw	r26, 0x01	; 1
 7ba:	f1 f7       	brne	.-4      	; 0x7b8 <main+0x2aa>
 7bc:	00 c0       	rjmp	.+0      	; 0x7be <main+0x2b0>
 7be:	00 00       	nop
					_delay_ms(10);
					
					LCD_Write_Command(0x80);//the LCD command will be Force cursor to the beginning ( 1st line)
 7c0:	80 e8       	ldi	r24, 0x80	; 128
 7c2:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
					LCD_Write_Word("1) ON   ");
 7c6:	c7 01       	movw	r24, r14
 7c8:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
					LCD_Write_Command(0xc0);//the LCD command will be Force cursor to the beginning ( 2st line)
 7cc:	80 ec       	ldi	r24, 0xC0	; 192
 7ce:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_Write_Command>
					LCD_Write_Word("2) OFF  ");
 7d2:	c6 01       	movw	r24, r12
 7d4:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Write_Word>
					
					switch (UART_Recieve())
 7d8:	0e 94 57 04 	call	0x8ae	; 0x8ae <UART_Recieve>
 7dc:	81 33       	cpi	r24, 0x31	; 49
 7de:	21 f0       	breq	.+8      	; 0x7e8 <main+0x2da>
 7e0:	82 33       	cpi	r24, 0x32	; 50
 7e2:	09 f0       	breq	.+2      	; 0x7e6 <main+0x2d8>
 7e4:	ff ce       	rjmp	.-514    	; 0x5e4 <main+0xd6>
 7e6:	0c c0       	rjmp	.+24     	; 0x800 <main+0x2f2>
					{
						case '1':// if the user choose on air conditioner
						{
							LCD_Clear_Screen();//the LCD command will be the clear LCD screen
 7e8:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Clear_Screen>
 7ec:	83 ec       	ldi	r24, 0xC3	; 195
 7ee:	99 e0       	ldi	r25, 0x09	; 9
 7f0:	01 97       	sbiw	r24, 0x01	; 1
 7f2:	f1 f7       	brne	.-4      	; 0x7f0 <main+0x2e2>
 7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <main+0x2e8>
 7f6:	00 00       	nop
							_delay_ms(10);
							SPI_Send_Data(AIR_CONDITIONER_ONN);
 7f8:	87 e0       	ldi	r24, 0x07	; 7
 7fa:	0e 94 3a 04 	call	0x874	; 0x874 <SPI_Send_Data>
							
						}break;
 7fe:	f2 ce       	rjmp	.-540    	; 0x5e4 <main+0xd6>

						case '2':// if the user choose off air conditioner
						{
							LCD_Clear_Screen();//the LCD command will be the clear LCD screen
 800:	0e 94 83 02 	call	0x506	; 0x506 <LCD_Clear_Screen>
 804:	a3 ec       	ldi	r26, 0xC3	; 195
 806:	b9 e0       	ldi	r27, 0x09	; 9
 808:	11 97       	sbiw	r26, 0x01	; 1
 80a:	f1 f7       	brne	.-4      	; 0x808 <main+0x2fa>
 80c:	00 c0       	rjmp	.+0      	; 0x80e <main+0x300>
 80e:	00 00       	nop
							_delay_ms(10);
							SPI_Send_Data(AIR_CONDITIONER_OF);
 810:	88 e0       	ldi	r24, 0x08	; 8
 812:	0e 94 3a 04 	call	0x874	; 0x874 <SPI_Send_Data>
							
						}break;
 816:	e6 ce       	rjmp	.-564    	; 0x5e4 <main+0xd6>

00000818 <SPI_Master_Init>:


void SPI_Master_Init(void)
{

	DIO_SetPin_Direction(portB,PIN4,OUTPUT);  //  SS pin output
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	64 e0       	ldi	r22, 0x04	; 4
 81c:	41 e0       	ldi	r20, 0x01	; 1
 81e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(portB,PIN5,OUTPUT);  //  MOSI pin output
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	65 e0       	ldi	r22, 0x05	; 5
 826:	41 e0       	ldi	r20, 0x01	; 1
 828:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(portB,PIN6,INPUT );   //  MISO pin input
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	66 e0       	ldi	r22, 0x06	; 6
 830:	40 e0       	ldi	r20, 0x00	; 0
 832:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(portB,PIN7,OUTPUT);  //  SCK pin output
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	67 e0       	ldi	r22, 0x07	; 7
 83a:	41 e0       	ldi	r20, 0x01	; 1
 83c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>

	SPCR = 0x53;
 840:	83 e5       	ldi	r24, 0x53	; 83
 842:	8d b9       	out	0x0d, r24	; 13

}
 844:	08 95       	ret

00000846 <SPI_Slave_Init>:
void SPI_Slave_Init(void)
{

	DIO_SetPin_Direction(portB,PIN4,INPUT );  //  SS pin output
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	64 e0       	ldi	r22, 0x04	; 4
 84a:	40 e0       	ldi	r20, 0x00	; 0
 84c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(portB,PIN5,INPUT );  //  MOSI pin output
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	65 e0       	ldi	r22, 0x05	; 5
 854:	40 e0       	ldi	r20, 0x00	; 0
 856:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(portB,PIN6,OUTPUT);  //  MISO pin input
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	66 e0       	ldi	r22, 0x06	; 6
 85e:	41 e0       	ldi	r20, 0x01	; 1
 860:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(portB,PIN7,INPUT );  //  SCK pin output
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	67 e0       	ldi	r22, 0x07	; 7
 868:	40 e0       	ldi	r20, 0x00	; 0
 86a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>

	SPCR = 0x40;
 86e:	80 e4       	ldi	r24, 0x40	; 64
 870:	8d b9       	out	0x0d, r24	; 13

}
 872:	08 95       	ret

00000874 <SPI_Send_Data>:

void SPI_Send_Data(U8 Data)
{
 874:	cf 93       	push	r28
 876:	c8 2f       	mov	r28, r24
	DIO_SetPin_Value(portB,PIN4,LOW);
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	64 e0       	ldi	r22, 0x04	; 4
 87c:	40 e0       	ldi	r20, 0x00	; 0
 87e:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_SetPin_Value>
	SPDR = Data;               // Send Data
 882:	cf b9       	out	0x0f, r28	; 15
	while(GET_BIT(SPSR,7)==0); //wait until SPI interrupt flag = 1 ( Data sent )
 884:	77 9b       	sbis	0x0e, 7	; 14
 886:	fe cf       	rjmp	.-4      	; 0x884 <SPI_Send_Data+0x10>
}
 888:	cf 91       	pop	r28
 88a:	08 95       	ret

0000088c <SPI_Receive_Data>:

U8 SPI_Receive_Data(void)
{
	while(GET_BIT(SPSR,7)==0);//wait until SPI interrupt flag = 1 ( Data sent )
 88c:	77 9b       	sbis	0x0e, 7	; 14
 88e:	fe cf       	rjmp	.-4      	; 0x88c <SPI_Receive_Data>
	return SPDR ;
 890:	8f b1       	in	r24, 0x0f	; 15
}
 892:	08 95       	ret

00000894 <UART_Init>:

void UART_Init(void)
{
	
	//Enable RX And Tx
	SET_BIT(UCSRB,3);
 894:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,4);
 896:	54 9a       	sbi	0x0a, 4	; 10
	
	//Setting the Frame formate: 8bits, no parity, one stop bits.
	UCSRC = 0b10000110;
 898:	86 e8       	ldi	r24, 0x86	; 134
 89a:	80 bd       	out	0x20, r24	; 32
	
	//Setting the baud rate to 9600
	UBRRH=0;
 89c:	10 bc       	out	0x20, r1	; 32
	UBRRL=103;
 89e:	87 e6       	ldi	r24, 0x67	; 103
 8a0:	89 b9       	out	0x09, r24	; 9
	
}
 8a2:	08 95       	ret

000008a4 <UART_Send>:

void UART_Send(U8 Data)
{
	while(GET_BIT(UCSRA, 5)==0);
 8a4:	9b b1       	in	r25, 0x0b	; 11
 8a6:	95 ff       	sbrs	r25, 5
 8a8:	fd cf       	rjmp	.-6      	; 0x8a4 <UART_Send>
	UDR=Data;
 8aa:	8c b9       	out	0x0c, r24	; 12
}
 8ac:	08 95       	ret

000008ae <UART_Recieve>:

U8   UART_Recieve(void)
{
	while(GET_BIT(UCSRA, 7)==0);
 8ae:	5f 9b       	sbis	0x0b, 7	; 11
 8b0:	fe cf       	rjmp	.-4      	; 0x8ae <UART_Recieve>
	return UDR;
 8b2:	8c b1       	in	r24, 0x0c	; 12
}
 8b4:	08 95       	ret

000008b6 <_exit>:
 8b6:	f8 94       	cli

000008b8 <__stop_program>:
 8b8:	ff cf       	rjmp	.-2      	; 0x8b8 <__stop_program>
